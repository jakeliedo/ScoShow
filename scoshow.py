"""
ScoShow - Tournament Ranking Display
·ª®ng d·ª•ng hi·ªÉn th·ªã b·∫£ng x·∫øp h·∫°ng tournament tr√™n m√†n h√¨nh m·ªü r·ªông v·ªõi ƒëi·ªÅu khi·ªÉn t·ª´ m√†n h√¨nh ch√≠nh
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import os
import json
from PIL import Image, ImageTk, ImageDraw, ImageFont
import threading
import time
from screeninfo import get_monitors

class TournamentDisplayWindow:
    """C·ª≠a s·ªï hi·ªÉn th·ªã tournament tr√™n m√†n h√¨nh m·ªü r·ªông"""
    
    def __init__(self, monitor_index=1):
        self.root = tk.Toplevel()
                   ttk.Button(display_buttons, text="üöÄ Open Display", 
                  style='Success.TButton',
                  command=self.open_display).pack(side=tk.LEFT, padx=(0, 8))
        ttk.Button(display_buttons, text="üî¥ Close Display", 
                  style='Warning.TButton',
                  command=self.close_display).pack(side=tk.LEFT)tton(display_buttons, text="üöÄ Open Display", 
                  style='Success.TButton',
                  command=self.open_display).pack(side=tk.LEFT, padx=(0, 8))
        ttk.Button(display_buttons, text="üî¥ Close Display", 
                  style='Warning.TButton',
                  command=self.close_display).pack(side=tk.LEFT)ot.title("ScoShow - Tournament Display")
        self.root.configure(bg='black')
        
        # Thi·∫øt l·∫≠p fullscreen tr√™n m√†n h√¨nh m·ªü r·ªông
        self.setup_monitor(monitor_index)
        
        # Label ƒë·ªÉ hi·ªÉn th·ªã ·∫£nh
        self.image_label = tk.Label(self.root, bg='black')
        self.image_label.pack(expand=True)
        
        # ·∫¢nh n·ªÅn hi·ªán t·∫°i
        self.current_background = None
        self.background_paths = {}  # {00: path, 01: path, 02: path}
        
        # Font cho text overlay
        self.font_size = 60
        self.font_color = "white"
        
    def setup_monitor(self, monitor_index):
        """Thi·∫øt l·∫≠p c·ª≠a s·ªï tr√™n m√†n h√¨nh ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh"""
        monitors = get_monitors()
        
        if monitor_index < len(monitors):
            monitor = monitors[monitor_index]
            self.root.geometry(f"{monitor.width}x{monitor.height}+{monitor.x}+{monitor.y}")
        else:
            # N·∫øu kh√¥ng c√≥ m√†n h√¨nh m·ªü r·ªông, s·ª≠ d·ª•ng m√†n h√¨nh ch√≠nh
            self.root.geometry("470x700+100+100")
            
        self.root.attributes('-fullscreen', True)
        self.root.bind('<Escape>', lambda e: self.root.attributes('-fullscreen', False))
        
    def load_background_folder(self, folder_path):
        """T·∫£i th∆∞ m·ª•c ch·ª©a ·∫£nh n·ªÅn"""
        required_files = ["00.jpg", "01.png", "02.png"]
        found_files = {}
        
        for filename in required_files:
            full_path = os.path.join(folder_path, filename)
            if os.path.exists(full_path):
                # L·∫•y ID t·ª´ t√™n file (00, 01, 02)
                bg_id = filename.split('.')[0]
                found_files[bg_id] = full_path
                
        if len(found_files) >= 3:
            self.background_paths = found_files
            return True
        return False
        
    def show_background(self, bg_id, overlay_data=None):
        """Hi·ªÉn th·ªã ·∫£nh n·ªÅn v·ªõi overlay text"""
        if bg_id not in self.background_paths:
            return False
            
        try:
            # M·ªü ·∫£nh n·ªÅn
            background_path = self.background_paths[bg_id]
            image = Image.open(background_path).copy()
            
            # Th√™m text overlay n·∫øu c√≥
            if overlay_data:
                self.add_text_overlay(image, bg_id, overlay_data)
            
            # L·∫•y k√≠ch th∆∞·ªõc c·ª≠a s·ªï
            window_width = self.root.winfo_width()
            window_height = self.root.winfo_height()
            
            if window_width <= 1 or window_height <= 1:
                window_width = 1920
                window_height = 1080
            
            # Resize ·∫£nh ƒë·ªÉ fit m√†n h√¨nh
            image.thumbnail((window_width, window_height), Image.Resampling.LANCZOS)
            
            # Chuy·ªÉn ƒë·ªïi cho Tkinter
            photo = ImageTk.PhotoImage(image)
            
            # Hi·ªÉn th·ªã ·∫£nh
            self.image_label.configure(image=photo)
            self.image_label.image = photo  # Gi·ªØ tham chi·∫øu
            
            self.current_background = bg_id
            return True
            
        except Exception as e:
            print(f"L·ªói khi hi·ªÉn th·ªã ·∫£nh n·ªÅn {bg_id}: {e}")
            return False
            
    def add_text_overlay(self, image, bg_id, overlay_data):
        """Th√™m text overlay l√™n ·∫£nh"""
        draw = ImageDraw.Draw(image)
        
        if bg_id == "01":  # Background c·∫≠p nh·∫≠t th·ª© h·∫°ng
            self.add_ranking_overlay(draw, overlay_data)
        elif bg_id == "02":  # Background k·∫øt qu·∫£ cu·ªëi
            self.add_final_overlay(draw, overlay_data)
            
    def add_ranking_overlay(self, draw, data):
        """Th√™m text ranking cho background 01"""
        # L·∫•y font settings
        font_settings = data.get('font_settings', {})
        font_name = font_settings.get('font_name', 'arial.ttf')
        rank_font_size = font_settings.get('rank_font_size', 60)
        round_font_size = font_settings.get('round_font_size', 60)
        color = font_settings.get('color', 'white')
        
        # T·∫°o font cho ranking v√† round
        try:
            rank_font = ImageFont.truetype(font_name, rank_font_size)
        except:
            try:
                rank_font = ImageFont.truetype(f"C:/Windows/Fonts/{font_name}", rank_font_size)
            except:
                rank_font = ImageFont.load_default()
                
        try:
            round_font = ImageFont.truetype(font_name, round_font_size)
        except:
            try:
                round_font = ImageFont.truetype(f"C:/Windows/Fonts/{font_name}", round_font_size)
            except:
                round_font = ImageFont.load_default()
        
        # L·∫•y v·ªã tr√≠ t·ª´ data
        positions = data.get('positions', {})
        
        # V·∫Ω s·ªë round
        if 'round' in data and data['round'] and 'round' in positions:
            x, y = positions['round']
            draw.text((x, y), str(data['round']), fill=color, font=round_font)
            
        # V·∫Ω t√™n players cho c√°c rank
        for rank in ['1st', '2nd', '3rd', '4th', '5th', '6th', '7th', '8th', '9th', '10th']:
            if rank in data and data[rank] and rank in positions and positions[rank]:
                x, y = positions[rank]
                draw.text((x, y), data[rank], fill=color, font=rank_font)
                
    def add_final_overlay(self, draw, data):
        """Th√™m text k·∫øt qu·∫£ cu·ªëi cho background 02"""
        # L·∫•y font settings
        font_settings = data.get('font_settings', {})
        font_name = font_settings.get('font_name', 'arial.ttf')
        font_size = font_settings.get('font_size', 60)
        color = font_settings.get('color', 'white')
        
        # T·∫°o font
        try:
            font = ImageFont.truetype(font_name, font_size)
        except:
            try:
                font = ImageFont.truetype(f"C:/Windows/Fonts/{font_name}", font_size)
            except:
                font = ImageFont.load_default()
        
        # L·∫•y v·ªã tr√≠ t·ª´ data
        positions = data.get('positions', {})
        
        # V·∫Ω k·∫øt qu·∫£ cu·ªëi
        for key in ['winner', 'second', 'third', 'fourth', 'fifth']:
            if key in data and data[key] and key in positions and positions[key]:
                x, y = positions[key]
                draw.text((x, y), data[key], fill=color, font=font)
                
    def close(self):
        """ƒê√≥ng c·ª≠a s·ªï hi·ªÉn th·ªã"""
        self.root.destroy()

class TournamentControlPanel:
    """Panel ƒëi·ªÅu khi·ªÉn tournament tr√™n m√†n h√¨nh ch√≠nh"""
    
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("ScoShow - Tournament Control")
        
        # T√≠nh to√°n k√≠ch th∆∞·ªõc c·ª≠a s·ªï d·ª±a tr√™n ƒë·ªô ph√¢n gi·∫£i m√†n h√¨nh
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()
        
        # S·ª≠ d·ª•ng k√≠ch th∆∞·ªõc c·ª≠a s·ªï r·ªông h∆°n ƒë·ªÉ ch·ª©a 2 c·ªôt song song
        window_width = 820
        window_height = 880

        # T√≠nh to√°n v·ªã tr√≠ ƒë·ªÉ c·ª≠a s·ªï ·ªü gi·ªØa m√†n h√¨nh
        x = (screen_width - window_width) // 2
        y = (screen_height - window_height) // 2
        
        self.root.geometry(f"{window_width}x{window_height}+{x}+{y}")
        
        # Cho ph√©p resize c·ª≠a s·ªï
        self.root.resizable(True, True)
        
        # ƒê·∫∑t k√≠ch th∆∞·ªõc t·ªëi thi·ªÉu
        self.root.minsize(705, 886)
        
        # Tournament display window
        self.display_window = None
        
        # Background folder path
        self.background_folder = ""
        
        # Current background mode
        self.current_mode = None
        
        # Selected monitor index
        self.selected_monitor = tk.IntVar(value=0)  # Default to first monitor (index 0)
        
        # Config file path
        self.config_file = "scoshow_config.json"
        
        # Text input variables
        self.setup_variables()
        
        # Load config if exists
        self.load_config()
        
        self.setup_ui()
        
    def setup_variables(self):
        """Thi·∫øt l·∫≠p bi·∫øn cho c√°c √¥ nh·∫≠p text v√† t·ªça ƒë·ªô"""
        # Variables cho background 01 (ranking update)
        self.round_var = tk.StringVar()
        self.rank_vars = {
            '1st': tk.StringVar(),
            '2nd': tk.StringVar(), 
            '3rd': tk.StringVar(),
            '4th': tk.StringVar(),
            '5th': tk.StringVar(),
            '6th': tk.StringVar(),
            '7th': tk.StringVar(),
            '8th': tk.StringVar(),
            '9th': tk.StringVar(),
            '10th': tk.StringVar()
        }
        
        # T·ªça ƒë·ªô ƒëi·ªÉm g·ªëc cho round
        self.round_position = tk.StringVar(value="1286,917")
        self.round_font_size = tk.StringVar(value="60")
        
        # T·ªça ƒë·ªô ƒëi·ªÉm g·ªëc cho c√°c v·ªã tr√≠ rank
        self.rank_positions = {
            '1st': tk.StringVar(value="1000,400"),
            '2nd': tk.StringVar(value="1000,500"),
            '3rd': tk.StringVar(value="1000,600"),
            '4th': tk.StringVar(value="1000,700"),
            '5th': tk.StringVar(value="1000,800"),
            '6th': tk.StringVar(value="1000,900"),
            '7th': tk.StringVar(value="1000,1000"),
            '8th': tk.StringVar(value="2000,400"),
            '9th': tk.StringVar(value="2000,500"),
            '10th': tk.StringVar(value="2000,600")
        }
        
        # Font settings cho ranking
        self.rank_font_size = tk.StringVar(value="60")
        self.font_name = tk.StringVar(value="arial.ttf")
        self.font_color = tk.StringVar(value="white")
        
        # Font options
        self.font_options = [
            "arial.ttf", "times.ttf", "calibri.ttf", "verdana.ttf", 
            "tahoma.ttf", "georgia.ttf", "trebuc.ttf", "comic.ttf"
        ]
        
        # Color options
        self.color_options = [
            "white", "black", "red", "blue", "green", "yellow", 
            "orange", "purple", "pink", "cyan", "magenta", "gray"
        ]
        
        # Variables cho background 02 (final results)
        self.final_vars = {
            'winner': tk.StringVar(),
            'second': tk.StringVar(),
            'third': tk.StringVar(),
            'fourth': tk.StringVar(),
            'fifth': tk.StringVar()
        }
        
        # T·ªça ƒë·ªô v√† font cho final results
        self.final_positions = {
            'winner': tk.StringVar(value="1920,300"),
            'second': tk.StringVar(value="1920,450"),
            'third': tk.StringVar(value="1920,600"),
            'fourth': tk.StringVar(value="1920,750"),
            'fifth': tk.StringVar(value="1920,900")
        }
        self.final_font_size = tk.StringVar(value="60")
        
    def load_config(self):
        """Load configuration t·ª´ file"""
        try:
            if os.path.exists(self.config_file):
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                    
                # Load positions
                if 'round_position' in config:
                    self.round_position.set(config['round_position'])
                if 'round_font_size' in config:
                    self.round_font_size.set(config['round_font_size'])
                    
                if 'rank_positions' in config:
                    for rank, pos in config['rank_positions'].items():
                        if rank in self.rank_positions:
                            self.rank_positions[rank].set(pos)
                            
                if 'final_positions' in config:
                    for key, pos in config['final_positions'].items():
                        if key in self.final_positions:
                            self.final_positions[key].set(pos)
                            
                # Load font settings
                if 'font_name' in config:
                    self.font_name.set(config['font_name'])
                if 'font_color' in config:
                    self.font_color.set(config['font_color'])
                if 'rank_font_size' in config:
                    self.rank_font_size.set(config['rank_font_size'])
                if 'final_font_size' in config:
                    self.final_font_size.set(config['final_font_size'])
                    
                # Load background folder
                if 'background_folder' in config:
                    self.background_folder = config['background_folder']
                    
                # Load selected monitor
                if 'selected_monitor' in config:
                    monitor_value = config['selected_monitor']
                    # Validate monitor index against available monitors
                    monitors = get_monitors()
                    if monitor_value < len(monitors):
                        self.selected_monitor.set(monitor_value)
                    else:
                        self.selected_monitor.set(0)  # Default to first monitor
                    
        except Exception as e:
            print(f"L·ªói khi load config: {e}")
            
    def save_config(self):
        """Save configuration v√†o file"""
        try:
            config = {
                'round_position': self.round_position.get(),
                'round_font_size': self.round_font_size.get(),
                'rank_positions': {rank: var.get() for rank, var in self.rank_positions.items()},
                'final_positions': {key: var.get() for key, var in self.final_positions.items()},
                'font_name': self.font_name.get(),
                'font_color': self.font_color.get(),
                'rank_font_size': self.rank_font_size.get(),
                'final_font_size': self.final_font_size.get(),
                'background_folder': self.background_folder,
                'selected_monitor': self.selected_monitor.get()
            }
            
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
                
        except Exception as e:
            print(f"L·ªói khi save config: {e}")
        
    def setup_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán ng∆∞·ªùi d√πng"""
        # Style configuration
        style = ttk.Style()
        style.theme_use('clam')  # Modern theme
        
        # Configure styles with colors
        style.configure('Title.TLabel', 
                       foreground='#2C3E50',
                       font=('Arial', 18, 'bold'))
        
        # Configure LabelFrame style properly
        style.configure('Header.TLabelFrame.Label', 
                       foreground='#34495E',
                       font=('Arial', 10, 'bold'))
        
        style.configure('Action.TButton',
                       foreground='white',
                       font=('Arial', 9, 'bold'))
        
        style.map('Action.TButton',
                 background=[('active', '#3498DB'),
                           ('!active', '#2980B9')])
        
        style.configure('Success.TButton',
                       foreground='white',
                       font=('Arial', 9, 'bold'))
        
        style.map('Success.TButton',
                 background=[('active', '#27AE60'),
                           ('!active', '#229954')])
        
        style.configure('Warning.TButton',
                       foreground='white',
                       font=('Arial', 9, 'bold'))
        
        style.map('Warning.TButton',
                 background=[('active', '#F39C12'),
                           ('!active', '#E67E22')])
        
        # Main container with background color
        self.root.configure(bg='#ECF0F1')
        
        # T·∫°o Canvas v√† Scrollbar cho kh·∫£ nƒÉng cu·ªôn
        main_canvas = tk.Canvas(self.root, bg='#ECF0F1', highlightthickness=0)
        scrollbar = ttk.Scrollbar(self.root, orient="vertical", command=main_canvas.yview)
        scrollable_frame = ttk.Frame(main_canvas)
        
        # C·∫•u h√¨nh scrollable frame
        scrollable_frame.bind(
            "<Configure>",
            lambda e: main_canvas.configure(scrollregion=main_canvas.bbox("all"))
        )
        
        main_canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        main_canvas.configure(yscrollcommand=scrollbar.set)
        
        # Pack canvas v√† scrollbar
        main_canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Bind mouse wheel ƒë·ªÉ cu·ªôn
        def _on_mousewheel(event):
            main_canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        main_canvas.bind_all("<MouseWheel>", _on_mousewheel)
        
        # Frame ch√≠nh v·ªõi padding trong scrollable frame
        main_frame = ttk.Frame(scrollable_frame)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=15, pady=15)
        
        # Header v·ªõi ti√™u ƒë·ªÅ v√† logo - compact h∆°n
        header_frame = tk.Frame(main_frame, bg='#2C3E50', height=60)
        header_frame.pack(fill=tk.X, pady=(0, 15))
        header_frame.pack_propagate(False)
        
        # Ti√™u ƒë·ªÅ ch√≠nh
        title_frame = tk.Frame(header_frame, bg='#2C3E50')
        title_frame.pack(expand=True)
        
        title_label = tk.Label(title_frame, 
                              text="üèÜ ScoShow - Tournament Ranking", 
                              font=('Arial', 16, 'bold'),
                              bg='#2C3E50',
                              fg='#ECF0F1')
        title_label.pack(pady=8)
        
        subtitle_label = tk.Label(title_frame,
                                 text="Professional Tournament Display System",
                                 font=('Arial', 9, 'italic'),
                                 bg='#2C3E50',
                                 fg='#BDC3C7')
        subtitle_label.pack()
        
        # T·∫°o container ch√≠nh ƒë·ªÉ ch·ª©a 2 c·ªôt song song
        content_container = ttk.Frame(main_frame)
        content_container.pack(fill=tk.BOTH, expand=True)
        
        # C·ªôt tr√°i cho c√°c th√†nh ph·∫ßn ch√≠nh
        left_column = ttk.Frame(content_container)
        left_column.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 10))
        
        # C·ªôt ph·∫£i cho Final Results
        right_column = ttk.Frame(content_container)
        right_column.pack(side=tk.RIGHT, fill=tk.Y, padx=(10, 0))
        
        # Frame cho vi·ªác ch·ªçn m√†n h√¨nh (c·ªôt tr√°i)
        monitor_frame = ttk.LabelFrame(left_column, text="üñ•Ô∏è  Monitor Setup", 
                                      padding="10")
        monitor_frame.pack(fill=tk.X, pady=(0, 10))
        
        # Hi·ªÉn th·ªã th√¥ng tin m√†n h√¨nh v·ªõi icon
        monitors = get_monitors()
        monitor_info = f"üì∫ Detected {len(monitors)} monitor(s)"
        info_label = ttk.Label(monitor_frame, text=monitor_info, 
                              font=('Arial', 9, 'bold'),
                              foreground='#2980B9')
        info_label.pack()
        
        # Th√™m t√πy ch·ªçn ch·ªçn m√†n h√¨nh
        monitor_selection_frame = ttk.Frame(monitor_frame)
        monitor_selection_frame.pack(pady=(5, 0))
        
        ttk.Label(monitor_selection_frame, text="Display on Monitor:").pack(side=tk.LEFT, padx=(0, 5))
        
        for i, monitor in enumerate(monitors):
            monitor_radio = ttk.Radiobutton(
                monitor_selection_frame,
                text=f"Monitor {i+1} ({monitor.width}x{monitor.height})",
                variable=self.selected_monitor,
                value=i
            )
            monitor_radio.pack(side=tk.LEFT, padx=(0, 10))
        
        if len(monitors) > 1:
            status_text = "‚úÖ Multiple monitors available - Choose monitor above"
            color = '#27AE60'
        else:
            status_text = "‚ö†Ô∏è  Only 1 monitor - will display in window"
            color = '#F39C12'
            
        status_label = ttk.Label(monitor_frame, text=status_text,
                                foreground=color, font=('Arial', 8))
        status_label.pack(pady=(3, 0))
        
        # Frame cho vi·ªác ch·ªçn th∆∞ m·ª•c background (c·ªôt tr√°i)
        bg_frame = ttk.LabelFrame(left_column, text="üñºÔ∏è  Background Setup", 
                                 padding="10")
        bg_frame.pack(fill=tk.X, pady=(0, 10))
        
        bg_button_frame = ttk.Frame(bg_frame)
        bg_button_frame.pack(fill=tk.X)
        
        ttk.Button(bg_button_frame, text="üìÅ Select Background Folder", 
                  style='Action.TButton',
                  command=self.select_background_folder).pack(side=tk.LEFT, padx=(0, 15))
        
        self.bg_status_label = ttk.Label(bg_button_frame, text="‚ùå No folder selected",
                                        foreground='#E74C3C',
                                        font=('Arial', 9, 'bold'))
        self.bg_status_label.pack(side=tk.LEFT)
        
        # Frame ƒëi·ªÅu khi·ªÉn hi·ªÉn th·ªã (c·ªôt tr√°i)
        display_frame = ttk.LabelFrame(left_column, text="üéÆ  Display Control", 
                                      padding="10")
        display_frame.pack(fill=tk.X, pady=(0, 10))
        
        # N√∫t m·ªü/ƒë√≥ng display
        display_buttons = ttk.Frame(display_frame)
        display_buttons.pack(fill=tk.X, pady=(0, 8))
        
        ttk.Button(display_buttons, text="üöÄ Open Display", 
                  style='Success.TButton',
                  command=self.open_display).pack(side=tk.LEFT, padx=(0, 8))
        ttk.Button(display_buttons, text="ÔøΩ Switch Monitor", 
                  style='Action.TButton',
                  command=self.switch_monitor).pack(side=tk.LEFT, padx=(0, 8))
        ttk.Button(display_buttons, text="ÔøΩüî¥ Close Display", 
                  style='Warning.TButton',
                  command=self.close_display).pack(side=tk.LEFT)
                  
        # N√∫t ch·ªçn background
        bg_buttons = ttk.Frame(display_frame)
        bg_buttons.pack(fill=tk.X)
        
        ttk.Button(bg_buttons, text="‚è∏Ô∏è  Show 00 (Waiting)", 
                  style='Action.TButton',
                  command=lambda: self.show_background("00")).pack(side=tk.LEFT, padx=(0, 6))
        ttk.Button(bg_buttons, text="üìä Show 01 (Ranking)", 
                  style='Success.TButton',
                  command=lambda: self.show_background("01")).pack(side=tk.LEFT, padx=(0, 6))
        ttk.Button(bg_buttons, text="üèÜ Show 02 (Final)", 
                  style='Warning.TButton',
                  command=lambda: self.show_background("02")).pack(side=tk.LEFT)
        
        # Frame cho input ranking (c·ªôt tr√°i)
        self.ranking_frame = ttk.LabelFrame(left_column, text="üìä Ranking Input (Background 01)", 
                                           padding="10")
        self.ranking_frame.pack(fill=tk.X, pady=(0, 10))
        
        # Font settings frame v·ªõi m√†u s·∫Øc - compact h∆°n
        font_frame = tk.Frame(self.ranking_frame, bg='#F8F9FA')
        font_frame.pack(fill=tk.X, pady=(0, 8))
        
        tk.Label(font_frame, text="üé® Font Settings", 
                font=('Arial', 9, 'bold'),
                bg='#F8F9FA', fg='#2C3E50').pack(pady=(3, 5))
        
        font_controls = ttk.Frame(font_frame)
        font_controls.pack()
        
        ttk.Label(font_controls, text="Font:").pack(side=tk.LEFT)
        font_combo = ttk.Combobox(font_controls, textvariable=self.font_name, 
                                 values=self.font_options, width=12, state="readonly")
        font_combo.pack(side=tk.LEFT, padx=(5, 10))
        
        ttk.Label(font_controls, text="Size:").pack(side=tk.LEFT)
        ttk.Entry(font_controls, textvariable=self.rank_font_size, width=4).pack(side=tk.LEFT, padx=(5, 10))
        
        ttk.Label(font_controls, text="Color:").pack(side=tk.LEFT)
        color_combo = ttk.Combobox(font_controls, textvariable=self.font_color, 
                                  values=self.color_options, width=8, state="readonly")
        color_combo.pack(side=tk.LEFT, padx=(5, 0))
        
        # Round input v·ªõi style ƒë·∫πp - compact h∆°n
        round_container = tk.Frame(self.ranking_frame, bg='#E8F4FD')
        round_container.pack(fill=tk.X, pady=(0, 8))
        
        tk.Label(round_container, text="üîÑ Round Settings", 
                font=('Arial', 9, 'bold'),
                bg='#E8F4FD', fg='#2980B9').pack(pady=(3, 3))
        
        round_frame = ttk.Frame(round_container)
        round_frame.pack(pady=(0, 5))
        
        ttk.Label(round_frame, text="Round:").pack(side=tk.LEFT)
        ttk.Entry(round_frame, textvariable=self.round_var, width=8).pack(side=tk.LEFT, padx=(5, 10))
        
        ttk.Label(round_frame, text="Position (x,y):").pack(side=tk.LEFT)
        ttk.Entry(round_frame, textvariable=self.round_position, width=12).pack(side=tk.LEFT, padx=(5, 10))
        
        ttk.Label(round_frame, text="Font Size:").pack(side=tk.LEFT)
        ttk.Entry(round_frame, textvariable=self.round_font_size, width=4).pack(side=tk.LEFT, padx=(5, 0))
        
        # Ranking inputs - chia th√†nh 2 c·ªôt v·ªõi style ƒë·∫πp - compact h∆°n
        ranking_input_frame = ttk.Frame(self.ranking_frame)
        ranking_input_frame.pack(fill=tk.X, pady=(0, 8))
        
        # C·ªôt 1: 1st - 5th v·ªõi background m√†u
        col1_container = tk.Frame(ranking_input_frame, bg='#E8F6F3')
        col1_container.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 5))
        
        tk.Label(col1_container, text="ü•á Ranks 1-5", 
                font=('Arial', 9, 'bold'),
                bg='#E8F6F3', fg='#27AE60').pack(pady=(5, 3))
        
        col1_frame = ttk.Frame(col1_container)
        col1_frame.pack(padx=8, pady=(0, 5))
        
        for rank in ['1st', '2nd', '3rd', '4th', '5th']:
            rank_frame = ttk.Frame(col1_frame)
            rank_frame.pack(fill=tk.X, pady=(0, 2))
            ttk.Label(rank_frame, text=f"{rank}:", width=5).pack(side=tk.LEFT)
            ttk.Entry(rank_frame, textvariable=self.rank_vars[rank], width=14).pack(side=tk.LEFT, padx=(3, 3))
            ttk.Entry(rank_frame, textvariable=self.rank_positions[rank], width=8).pack(side=tk.LEFT, padx=(3, 0))
            
        # C·ªôt 2: 6th - 10th v·ªõi background m√†u
        col2_container = tk.Frame(ranking_input_frame, bg='#FDF2E9')
        col2_container.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        tk.Label(col2_container, text="ü•â Ranks 6-10", 
                font=('Arial', 9, 'bold'),
                bg='#FDF2E9', fg='#E67E22').pack(pady=(5, 3))
        
        col2_frame = ttk.Frame(col2_container)
        col2_frame.pack(padx=8, pady=(0, 5))
        
        for rank in ['6th', '7th', '8th', '9th', '10th']:
            rank_frame = ttk.Frame(col2_frame)
            rank_frame.pack(fill=tk.X, pady=(0, 2))
            ttk.Label(rank_frame, text=f"{rank}:", width=5).pack(side=tk.LEFT)
            ttk.Entry(rank_frame, textvariable=self.rank_vars[rank], width=14).pack(side=tk.LEFT, padx=(3, 3))
            ttk.Entry(rank_frame, textvariable=self.rank_positions[rank], width=8).pack(side=tk.LEFT, padx=(3, 0))
            
        # Apply button cho ranking v·ªõi style ƒë·∫πp
        ttk.Button(self.ranking_frame, text="‚úÖ Apply Ranking", 
                  style='Success.TButton',
                  command=self.apply_ranking).pack(pady=(8, 0))
        
        # Frame cho input final results (c·ªôt ph·∫£i) - compact v√† song song v·ªõi ranking
        self.final_frame = ttk.LabelFrame(right_column, text="üèÜ Final Results Input (Background 02)", 
                                         padding="10")
        self.final_frame.pack(fill=tk.BOTH, expand=True)
        
        # Font settings cho final results v·ªõi background - ƒë·∫ßy ƒë·ªß t√πy ch·ªçn
        final_font_container = tk.Frame(self.final_frame, bg='#FEF9E7')
        final_font_container.pack(fill=tk.X, pady=(0, 8))
        
        tk.Label(final_font_container, text="üé® Final Results Font", 
                font=('Arial', 9, 'bold'),
                bg='#FEF9E7', fg='#F39C12').pack(pady=(3, 3))
        
        final_font_frame = ttk.Frame(final_font_container)
        final_font_frame.pack(pady=(0, 5))
        
        # Font selection cho final results
        ttk.Label(final_font_frame, text="Font:").pack(side=tk.LEFT)
        final_font_combo = ttk.Combobox(final_font_frame, textvariable=self.font_name, 
                                       values=self.font_options, width=10, state="readonly")
        final_font_combo.pack(side=tk.LEFT, padx=(5, 8))
        
        ttk.Label(final_font_frame, text="Size:").pack(side=tk.LEFT)
        ttk.Entry(final_font_frame, textvariable=self.final_font_size, width=4).pack(side=tk.LEFT, padx=(5, 8))
        
        ttk.Label(final_font_frame, text="Color:").pack(side=tk.LEFT)
        final_color_combo = ttk.Combobox(final_font_frame, textvariable=self.font_color, 
                                        values=self.color_options, width=6, state="readonly")
        final_color_combo.pack(side=tk.LEFT, padx=(5, 0))
        
        # Final result inputs v·ªõi style ƒë·∫πp - compact h∆°n
        results_container = tk.Frame(self.final_frame, bg='#FDEDEC')
        results_container.pack(fill=tk.X, pady=(0, 8))
        
        tk.Label(results_container, text="üèÖ Championship Rankings", 
                font=('Arial', 9, 'bold'),
                bg='#FDEDEC', fg='#E74C3C').pack(pady=(3, 5))
        
        results_frame = ttk.Frame(results_container)
        results_frame.pack(padx=8, pady=(0, 5))
        
        final_labels = {'winner': 'ü•á 1st Place:', 'second': 'ü•à 2nd Place:', 'third': 'ü•â 3rd Place:', 
                       'fourth': 'üèÖ 4th Place:', 'fifth': 'üéñÔ∏è 5th Place:'}
        for key, label in final_labels.items():
            final_rank_frame = ttk.Frame(results_frame)
            final_rank_frame.pack(fill=tk.X, pady=(0, 3))
            ttk.Label(final_rank_frame, text=label, width=12).pack(side=tk.LEFT)
            ttk.Entry(final_rank_frame, textvariable=self.final_vars[key], width=15).pack(side=tk.LEFT, padx=(3, 3))
            
            # T·ªça ƒë·ªô ƒëi·ªÉm g·ªëc - ƒë·∫∑t ·ªü d√≤ng ti·∫øp theo ƒë·ªÉ ti·∫øt ki·ªám ch·ªó
            pos_frame = ttk.Frame(results_frame)
            pos_frame.pack(fill=tk.X, pady=(0, 5))
            ttk.Label(pos_frame, text="Position:", width=8).pack(side=tk.LEFT)
            ttk.Entry(pos_frame, textvariable=self.final_positions[key], width=15).pack(side=tk.LEFT, padx=(3, 0))
            
        # Apply button cho final results v·ªõi style ƒë·∫πp
        ttk.Button(self.final_frame, text="üèÜ Apply Final Results", 
                  style='Warning.TButton',
                  command=self.apply_final_results).pack(pady=(8, 0))
        
        # Status label v·ªõi style ƒë·∫πp - compact h∆°n (c·ªôt tr√°i)
        status_container = tk.Frame(left_column, bg='#E8F6F3')
        status_container.pack(fill=tk.X, pady=(10, 5))
        
        tk.Label(status_container, text="üìä System Status", 
                font=('Arial', 9, 'bold'),
                bg='#E8F6F3', fg='#27AE60').pack(pady=(5, 3))
        
        self.status_label = tk.Label(status_container, text="Ready to start tournament display", 
                                   font=('Arial', 8),
                                   bg='#E8F6F3', fg='#2C3E50',
                                   relief=tk.FLAT,
                                   padx=8, pady=5)
        self.status_label.pack(pady=(0, 5))
        
    def select_background_folder(self):
        """Ch·ªçn th∆∞ m·ª•c ch·ª©a ·∫£nh background"""
        folder = filedialog.askdirectory(title="Ch·ªçn th∆∞ m·ª•c ch·ª©a background (00.jpg, 01.png, 02.png)")
        if folder:
            self.background_folder = folder
            # Ki·ªÉm tra xem c√≥ ƒë·ªß 3 file background kh√¥ng
            required_files = ["00.jpg", "01.png", "02.png"]
            missing_files = []
            
            for filename in required_files:
                if not os.path.exists(os.path.join(folder, filename)):
                    missing_files.append(filename)
                    
            if missing_files:
                messagebox.showwarning("C·∫£nh b√°o", 
                    f"Thi·∫øu c√°c file: {', '.join(missing_files)}")
                self.bg_status_label.config(text="Thi·∫øu file background")
            else:
                self.bg_status_label.config(text="‚úì Background OK")
                
    def open_display(self):
        """M·ªü ho·∫∑c chuy·ªÉn ƒë·ªïi c·ª≠a s·ªï hi·ªÉn th·ªã tournament"""
        if not self.background_folder:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn th∆∞ m·ª•c background tr∆∞·ªõc")
            return
            
        monitors = get_monitors()
        monitor_index = self.selected_monitor.get()
        
        # Ensure monitor_index is valid
        if monitor_index >= len(monitors):
            monitor_index = 0
            self.selected_monitor.set(0)
            
        print(f"Attempting to open/switch display to monitor {monitor_index + 1}")
        
        # Close existing display window if it's open
        if self.display_window:
            self.display_window.close()
            self.display_window = None
            
        # Create a new display window on the selected monitor
        self.display_window = TournamentDisplayWindow(monitor_index)
        
        # Load background folder and restore state
        if self.display_window.load_background_folder(self.background_folder):
            self.status_label.config(text=f"Display opened on Monitor {monitor_index + 1}")
            
            # Restore the last shown background
            if self.current_mode:
                if self.current_mode == "00":
                    self.display_window.show_background("00")
                elif self.current_mode == "01":
                    self.apply_ranking(show_popup=False) # Avoid popup on switch
                elif self.current_mode == "02":
                    self.apply_final_results(show_popup=False) # Avoid popup on switch
        else:
            messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ load background")
            self.display_window.close()
            self.display_window = None
            
    def close_display(self):
        """ƒê√≥ng c·ª≠a s·ªï hi·ªÉn th·ªã tournament"""
        if self.display_window:
            self.display_window.close()
            self.display_window = None
            # Don't clear current_mode, so it can be restored
            self.status_label.config(text="Display closed")
            print("Display window closed")
        else:
            messagebox.showinfo("Th√¥ng b√°o", "Kh√¥ng c√≥ display n√†o ƒëang m·ªü")
    
    def show_background(self, bg_id):
        """Hi·ªÉn th·ªã background ƒë∆∞·ª£c ch·ªçn"""
        if not self.display_window:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng m·ªü display tr∆∞·ªõc")
            return
            
        self.current_mode = bg_id
        
        if bg_id == "00":
            # Background ch·ªù - ch·ªâ hi·ªÉn th·ªã ·∫£nh
            success = self.display_window.show_background(bg_id)
        elif bg_id == "01":
            # Background ranking - hi·ªÉn th·ªã v·ªõi data hi·ªán t·∫°i
            self.apply_ranking()
            return
        elif bg_id == "02":
            # Background final - hi·ªÉn th·ªã v·ªõi data hi·ªán t·∫°i  
            self.apply_final_results()
            return
            
        # Kh√¥ng hi·ªÉn th·ªã popup cho vi·ªác chuy·ªÉn background
            
    def apply_ranking(self, show_popup=True):
        """Apply ranking data l√™n background 01"""
        if not self.display_window:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng m·ªü display tr∆∞·ªõc")
            return
            
        # Thu th·∫≠p data t·ª´ input fields
        overlay_data = {
            'round': self.round_var.get()
        }
        
        for rank, var in self.rank_vars.items():
            overlay_data[rank] = var.get()
            
        # Thu th·∫≠p t·ªça ƒë·ªô ƒëi·ªÉm g·ªëc
        positions = {}
        try:
            round_pos = self.round_position.get().split(',')
            positions['round'] = (int(round_pos[0]), int(round_pos[1]))
        except (ValueError, IndexError):
            positions['round'] = (1286, 917)  # default
            
        for rank, pos_var in self.rank_positions.items():
            try:
                pos = pos_var.get().split(',')
                positions[rank] = (int(pos[0]), int(pos[1]))
            except (ValueError, IndexError):
                positions[rank] = None
                
        overlay_data['positions'] = positions
        
        # Thu th·∫≠p font settings
        font_settings = {
            'font_name': self.font_name.get(),
            'rank_font_size': int(self.rank_font_size.get()) if self.rank_font_size.get().isdigit() else 60,
            'round_font_size': int(self.round_font_size.get()) if self.round_font_size.get().isdigit() else 60,
            'color': self.font_color.get()
        }
        overlay_data['font_settings'] = font_settings
        
        # Hi·ªÉn th·ªã background v·ªõi overlay
        success = self.display_window.show_background("01", overlay_data)
        
        if success:
            self.current_mode = "01"
            if show_popup:
                messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ c·∫≠p nh·∫≠t ranking")
        else:
            if show_popup:
                messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ranking")
            
    def apply_final_results(self, show_popup=True):
        """Apply final results l√™n background 02"""
        if not self.display_window:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng m·ªü display tr∆∞·ªõc")
            return
            
        # Thu th·∫≠p data t·ª´ input fields
        overlay_data = {}
        for key, var in self.final_vars.items():
            overlay_data[key] = var.get()
            
        # Thu th·∫≠p t·ªça ƒë·ªô ƒëi·ªÉm g·ªëc cho final results
        positions = {}
        for key, pos_var in self.final_positions.items():
            try:
                pos = pos_var.get().split(',')
                positions[key] = (int(pos[0]), int(pos[1]))
            except (ValueError, IndexError):
                positions[key] = None
                
        overlay_data['positions'] = positions
        
        # Font settings cho final results
        font_settings = {
            'font_name': self.font_name.get(),
            'font_size': int(self.final_font_size.get()) if self.final_font_size.get().isdigit() else 60,
            'color': self.font_color.get()
        }
        overlay_data['font_settings'] = font_settings
        
        # Hi·ªÉn th·ªã background v·ªõi overlay
        success = self.display_window.show_background("02", overlay_data)
        
        if success:
            self.current_mode = "02"
            if show_popup:
                messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ c·∫≠p nh·∫≠t final results")
        else:
            if show_popup:
                messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t final results")
            
    def run(self):
        """Ch·∫°y ·ª©ng d·ª•ng"""
        # Update background folder status n·∫øu c√≥ config
        if self.background_folder and os.path.exists(self.background_folder):
            self.bg_status_label.config(text="‚úì Background OK")
            
        # X·ª≠ l√Ω s·ª± ki·ªán ƒë√≥ng ·ª©ng d·ª•ng
        def on_closing():
            self.save_config()  # Save config khi ƒë√≥ng
            if self.display_window:
                self.display_window.close()
            self.root.destroy()
            
        self.root.protocol("WM_DELETE_WINDOW", on_closing)
        self.root.mainloop()

def main():
    """H√†m main"""
    try:
        app = TournamentControlPanel()
        app.run()
    except Exception as e:
        messagebox.showerror("L·ªói", f"ƒê√£ x·∫£y ra l·ªói: {e}")

if __name__ == "__main__":
    main()
